{
  "name": "xss",
  "main": "./lib/index.js",
  "version": "0.1.9",
  "description": "Sanitize untrusted HTML (to prevent XSS) with a configuration specified by a Whitelist. 根据白名单过滤HTML(防止XSS攻击)",
  "author": {
    "name": "leizongmin",
    "email": "leizongmin@gmail.com",
    "url": "http://ucdok.com"
  },
  "contributors": [
    {
      "name": "Zongmin Lei",
      "email": "leizongmin@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/leizongmin/js-xss.git"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "dependencies": {
    "commander": "2.1.x"
  },
  "devDependencies": {
    "mocha": "1.8.2",
    "blanket": "1.1.5",
    "browserify": "*",
    "uglify-js": "*"
  },
  "bin": {
    "xss": "./bin/xss"
  },
  "scripts": {
    "test": "mocha --require blanket -R html-cov > coverage.html -t 5000"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/leizongmin/js-xss/master/MIT-License"
    }
  ],
  "bugs": {
    "url": "https://github.com/leizongmin/js-xss/issues"
  },
  "homepage": "https://github.com/leizongmin/js-xss",
  "keywords": [
    "sanitization",
    "xss",
    "sanitize",
    "sanitisation",
    "input",
    "security",
    "escape",
    "encode",
    "filter",
    "validator",
    "html",
    "injection",
    "whitelist"
  ],
  "readme": "[![NPM version](https://badge.fury.io/js/xss.png)](http://badge.fury.io/js/xss)\n[![Build Status](https://secure.travis-ci.org/leizongmin/js-xss.png?branch=master)](http://travis-ci.org/leizongmin/js-xss)\n[![Dependencies Status](https://david-dm.org/leizongmin/js-xss.png)](https://david-dm.org/leizongmin/js-xss)\n\nSanitize untrusted HTML (to prevent XSS) with a configuration specified by a Whitelist.\n======\n\n![xss](https://nodei.co/npm/xss.png?downloads=true&stars=true)\n\n--------------\n\n**NOTE: The format of custom configuration (except Whitelist) from version\n0.0.X was changed a lot since version 0.1.X. To use a newer version, it's\nsuggested to read the following guidelines carefully.**\n\n**[中文版文档](https://github.com/leizongmin/js-xss/blob/master/README.zh.md)**\n\n`xss` is a module used to filter input from users to prevent XSS attacks.\n([What is XSS attack?](http://en.wikipedia.org/wiki/Cross-site_scripting))\n\nThis module is needed for situations that allows users to input HTML for\ntypesetting or formatting, including fourms, blogs, e-shops, etc.\n\nThe `xss` module controls the usage of tags and their attributes, according to\nthe whitelist. It is also extendable with a series of APIs privided, which make\nit become more flexible, compares with other modules.\n\n**Project Homepage:** https://github.com/leizongmin/js-xss\n\n---------------\n\n\n## Features\n\n+ Specifies HTML tags and their attributes allowed with whitelist\n+ Handle any tags or attributes using custom function.\n\n\n## Reference\n\n+ [XSS与字符编码的那些事儿 ---科普文](http://drops.wooyun.org/tips/689)\n+ [腾讯实例教程：那些年我们一起学XSS](http://www.wooyun.org/whitehats/%E5%BF%83%E4%BC%A4%E7%9A%84%E7%98%A6%E5%AD%90)\n+ [mXSS攻击的成因及常见种类](http://drops.wooyun.org/tips/956)\n+ [XSS Filter Evasion Cheat Sheet](https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet)\n+ [Data URI scheme](http://en.wikipedia.org/wiki/Data_URI_scheme)\n+ [XSS with Data URI Scheme](http://hi.baidu.com/badzzzz/item/bdbafe83144619c199255f7b)\n\n\n## Benchmark (for references only)\n\n+ the xss module: 8.2 MB/s\n+ `xss()` function from module `validator@0.3.7`: 4.4 MB/s\n\nFor test code please refer to `benchmark` directory.\n\n\n## Unit Test\n\nRun `npm test` command in the source directary.\n\n\n## Active Test\n\nRun the following command, them you can type HTML\ncode in the command-line, and check the filtered output:\n\n```bash\n$ xss -t\n```\n\n## Command Line Tool\n\nYou can use the xss command line tool to process a file. Usage:\n\n```bash\nxss -i <input_file> -o <output_file>\n```\n\nExample:\n\n```bash\n$ xss -i origin.html -o target.html\n```\n\nFor more details, please run `$ xss -h` to see it.\n\n\n## Usages\n\n### In Node.js\n\nTo install:\n\n```bash\n$ npm install xss\n```\n\nSimple usage:\n\n```JavaScript\nvar xss = require('xss');\nvar html = xss('<script>alert(\"xss\");</script>');\nconsole.log(html);\n```\n\n### In browsers\n\n```HTML\n<script src=\"https://raw.github.com/leizongmin/js-xss/master/build/xss.js\"></script>\n<script>\n// apply function filterXSS in the same way\nvar html = filterXSS('<script>alert(\"xss\");</scr' + 'ipt>');\nalert(html);\n</script>\n```\n\n### Bower\n\n```bash\n$ bower install xss\n```\n\n\n## Custom filter rules\n\nWhen using the `xss()` function, the second parameter could be used to specify\ncustom rules:\n\n```JavaScript\noptions = {};  // Custom rules\nhtml = xss('<script>alert(\"xss\");</script>', options);\n```\n\nTo avoid passing `options` every time, you can also do it in a faster way by\ncreating a `FilterXSS` instance:\n\n```JavaScript\noptions = {};  // Custom rules\nmyxss = new xss.FilterXSS(options);\n// then apply myxss.process()\nhtml = myxss.process('<script>alert(\"xss\");</script>');\n```\n\nDetails of parameters in `options` would be described below.\n\n### Whitelist\n\nBy specifying a `whiteList`, e.g. `{ 'tagName': [ 'attr-1', 'attr-2' ] }`. Tags\nand attributes not in the whitelist would be filter out. For example:\n\n```JavaScript\n// only tag a and its attributes href, title, target are allowed\nvar options = {\n  whiteList: {\n    a: ['href', 'title', 'target']\n  }\n};\n// With the configuration specified above, the following HTML:\n// <a href=\"#\" onclick=\"hello()\"><i>Hello</i></a>\n// would become:\n// <a href=\"#\">Hello</a>\n```\n\nFor the default whitelist, please refer `xss.whiteList`.\n\n### Customize the handler function for matched tags\n\nBy specifying the handler function with `onTag`:\n\n```JavaScript\nfunction onTag (tag, html, options) {\n  // tag is the name of current tag, e.g. 'a' for tag <a>\n  // html is the HTML of this tag, e.g. '<a>' for tag <a>\n  // options is some addition informations:\n  //   isWhite    boolean, whether the tag is in whitelist\n  //   isClosing  boolean, whether the tag is a closing tag, e.g. true for </a>\n  //   position        integer, the position of the tag in output result\n  //   sourcePosition  integer, the position of the tag in input HTML source\n  // If a string is returned, the current tag would be replaced with the string\n  // If return nothing, the default measure would be taken:\n  //   If in whitelist: filter attributes using onTagAttr, as described below\n  //   If not in whitelist: handle by onIgnoreTag, as described below\n}\n```\n\n### Customize the handler function for attributes of matched tags\n\nBy specifying the handler function with `onTagAttr`:\n\n```JavaScript\nfunction onTagAttr (tag, name, value, isWhiteAttr) {\n  // tag is the name of current tag, e.g. 'a' for tag <a>\n  // name is the name of current attribute, e.g. 'href' for href=\"#\"\n  // isWhiteAttr whether the tag is in whitelist\n  // If a string is returned, the attribute would be replaced with the string\n  // If return nothing, the default measure would be taken:\n  //   If in whitelist: filter the value using safeAttrValue as described below\n  //   If not in whitelist: handle by onIgnoreTagAttr, as described below\n}\n```\n\n### Customize the handler function for tags not in the whitelist\n\nBy specifying the handler function with `onIgnoreTag`:\n\n```JavaScript\nfunction onIgnoreTag (tag, html, options) {\n  // Parameters are the same with onTag\n  // If a string is returned, the tag would be replaced with the string\n  // If return nothing, the default measure would be taken (specifies using\n  // escape, as described below)\n}\n```\n\n### Customize the handler function for attributes not in the whitelist\n\nBy specifying the handler function with `onIgnoreTagAttr`:\n\n```JavaScript\nfunction onIgnoreTagAttr (tag, name, value, isWhiteAttr) {\n  // Parameters are the same with onTagAttr\n  // If a string is returned, the value would be replaced with this string\n  // If return nothing, then keep default (remove the attribute)\n}\n```\n\n### Customize escaping function for HTML\n\nBy specifying the handler function with `escapeHtml`. Following is the default\nfunction **(Modification is not recommended)**:\n\n```JavaScript\nfunction escapeHtml (html) {\n  return html.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\n```\n\n### Customize escaping function for value of attributes\n\nBy specifying the handler function with `safeAttrValue`:\n\n```JavaScript\nfunction safeAttrValue (tag, name, value) {\n  // Parameters are the same with onTagAttr (without options)\n  // Return the value as a string\n}\n```\n\n### Quick Start\n\n#### Filter out tags not in the whitelist\n\nBy using `stripIgnoreTag` parameter:\n\n+ `true` filter out tags not in the whitelist\n+ `false`: by default: escape the tag using configured `escape` function\n\nExample:\n\nIf `stripIgnoreTag = true` is set, the following code:\n\n```HTML\ncode:<script>alert(/xss/);</script>\n```\n\nwould output filtered:\n\n```HTML\ncode:alert(/xss/);\n```\n\n#### Filter out tags and tag bodies not in the whitelist\n\nBy using `stripIgnoreTagBody` parameter:\n\n+ `false|null|undefined` by default: do nothing\n+ `'*'|true`: filter out all tags not in the whitelist\n+ `['tag1', 'tag2']`: filter out only specified tags not in the whitelist\n\nExample:\n\nIf `stripIgnoreTagBody = ['script']` is set, the following code:\n\n```HTML\ncode:<script>alert(/xss/);</script>\n```\n\nwould output filtered:\n\n```HTML\ncode:\n```\n\n#### Filter out HTML comments\n\nBy using `allowCommentTag` parameter:\n\n+ `true`: do nothing\n+ `false` by default: filter out HTML comments\n\nExample:\n\nIf `allowCommentTag = false` is set, the following code:\n\n```HTML\ncode:<!-- something --> END\n```\n\nwould output filtered:\n\n```HTML\ncode: END\n```\n\n\n## Examples\n\n### Allow attributes of whitelist tags start with `data-`\n\n```JavaScript\nvar source = '<div a=\"1\" b=\"2\" data-a=\"3\" data-b=\"4\">hello</div>';\nvar html = xss(source, {\n  onIgnoreTagAttr: function (tag, name, value, isWhiteAttr) {\n    if (name.substr(0, 5) === 'data-') {\n      // escape its value using built-in escapeAttrValue function\n      return name + '=\"' + xss.escapeAttrValue(value) + '\"';\n    }\n  }\n});\n\nconsole.log('%s\\nconvert to:\\n%s', source, html);\n```\n\nResult:\n\n```\n<div a=\"1\" b=\"2\" data-a=\"3\" data-b=\"4\">hello</div>\nconvert to:\n<div data-a=\"3\" data-b=\"4\">hello</div>\n```\n\n### Allow tags start with `x-`\n\n```JavaScript\nvar source = '<x><x-1>he<x-2 checked></x-2>wwww</x-1><a>';\nvar html = xss(source, {\n  onIgnoreTag: function (tag, html, options) {\n    if (tag.substr(0, 2) === 'x-') {\n      // do not filter its attributes\n      return html;\n    }\n  }\n});\n\nconsole.log('%s\\nconvert to:\\n%s', source, html);\n```\n\nResult:\n\n```\n<x><x-1>he<x-2 checked></x-2>wwww</x-1><a>\nconvert to:\n&lt;x&gt;<x-1>he<x-2 checked></x-2>wwww</x-1><a>\n```\n\n### Parse images in HTML\n\n```JavaScript\nvar source = '<img src=\"img1\">a<img src=\"img2\">b<img src=\"img3\">c<img src=\"img4\">d';\nvar list = [];\nvar html = xss(source, {\n  onTagAttr: function (tag, name, value, isWhiteAttr) {\n    if (tag === 'img' && name === 'src') {\n      // Use the built-in friendlyAttrValue function to escape attribute\n      // values. It supports converting entity tags such as &lt; to printable\n      // characters such as <\n      list.push(xss.friendlyAttrValue(value));\n    }\n    // Return nothing, means keep the default handling measure\n  }\n});\n\nconsole.log('image list:\\n%s', list.join(', '));\n```\n\nResult:\n\n```\nimage list:\nimg1, img2, img3, img4\n```\n\n### Filter out HTML tags (keeps only plain text)\n\n```JavaScript\nvar source = '<strong>hello</strong><script>alert(/xss/);</script>end';\nvar html = xss(source, {\n  whiteList:          [],        // empty, means filter out all tags\n  stripIgnoreTag:     true,      // filter out all HTML not in the whilelist\n  stripIgnoreTagBody: ['script'] // the script tag is a special case, we need\n                                 // to filter out its content\n});\n\nconsole.log('text: %s', html);\n```\n\nResult:\n\n```\ntext: helloend\n```\n\n\n## License\n\nThe MIT License\n\n\n## Donate\n\nWe made xss in our spare time because it's fun to build things. We hope you find it useful.\n\nIf you like this package and want to support future development—or just say thank you, **please consider making a donation of $5, $10 or $20** (or whatever you can afford) to help us continue to improve it.\n\n[![Donate xss package by PayPal](https://raw.github.com/deweyapp/deweyapp/master/docs/images/donate.png)]\n(https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=leizongmin%40qq%2ecom&lc=US&no_note=0&currency_code=USD&bn=PP%2dDonationsBF%3abtn_donateCC_LG%2egif%3aNonHostedGuest)\n\n[![Donate xss package by Alipay](https://img.alipay.com/sys/personalprod/style/mc/btn-index.png)](https://me.alipay.com/leizongmin)\n",
  "readmeFilename": "README.md",
  "_id": "xss@0.1.9",
  "_shasum": "3c3cb752b62f6809c474c253b027a1b180daf759",
  "_from": "xss@0.1.9",
  "_resolved": "https://registry.npmjs.org/xss/-/xss-0.1.9.tgz"
}
